/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.flashy;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.awt.*;
import java.awt.event.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.*;
import java.nio.file.Paths;
import java.util.Comparator;
import javax.swing.*;

/**
 *
 * @author arpan
 */
public class FlashcardInput extends javax.swing.JFrame {

    private JComboBox<String> categoryComboBox;

    /**
     * Creates new form FlashcardInput
     */
    public FlashcardInput() {
        initComponents();
        updateCategoryComboBox();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblQuestion = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        lblTopic = new javax.swing.JLabel();
        btnAddCategory = new javax.swing.JButton();
        btnRemoveCategory = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAnswerInput = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtQuestionInput = new javax.swing.JTextArea();
        lblMessage = new javax.swing.JLabel();
        pnlFlashcardTopFrame = new javax.swing.JPanel();
        cboxCategory = new javax.swing.JComboBox<>();
        cboxTopic = new javax.swing.JComboBox<>();
        btnAddTopic = new javax.swing.JButton();
        btnRemoveTopic = new javax.swing.JButton();
        lblCategory = new javax.swing.JLabel();
        pnlInputBackground = new javax.swing.JPanel();
        lblAnswer = new javax.swing.JLabel();
        lblFlashcardConfirmation = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblQuestion.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblQuestion.setForeground(new java.awt.Color(102, 102, 102));
        lblQuestion.setText("Front (Question)");
        getContentPane().add(lblQuestion, new org.netbeans.lib.awtextra.AbsoluteConstraints(14, 109, 140, 30));

        btnAdd.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(255, 51, 51));
        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });
        getContentPane().add(btnAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 420, 87, 33));

        lblTopic.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblTopic.setForeground(new java.awt.Color(102, 102, 102));
        lblTopic.setText("Topic: ");
        getContentPane().add(lblTopic, new org.netbeans.lib.awtextra.AbsoluteConstraints(35, 30, -1, -1));

        btnAddCategory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddCategory.setText("Add Category");
        btnAddCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddCategoryActionPerformed(evt);
            }
        });
        getContentPane().add(btnAddCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 20, 130, -1));

        btnRemoveCategory.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRemoveCategory.setText("Remove Category");
        btnRemoveCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveCategoryActionPerformed(evt);
            }
        });
        getContentPane().add(btnRemoveCategory, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, -1, -1));

        txtAnswerInput.setColumns(20);
        txtAnswerInput.setRows(5);
        jScrollPane1.setViewportView(txtAnswerInput);
        txtAnswerInput.setLineWrap(true);  // Enable line wrap
        txtAnswerInput.setWrapStyleWord(true);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 280, 480, 130));

        txtQuestionInput.setColumns(20);
        txtQuestionInput.setRows(5);
        jScrollPane2.setViewportView(txtQuestionInput);
        txtQuestionInput.setLineWrap(true);  // Enable line wrap
        txtQuestionInput.setWrapStyleWord(true);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 120, 480, 130));
        getContentPane().add(lblMessage, new org.netbeans.lib.awtextra.AbsoluteConstraints(278, 347, 230, -1));

        pnlFlashcardTopFrame.setBackground(new java.awt.Color(255, 153, 153));
        pnlFlashcardTopFrame.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        cboxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboxCategoryActionPerformed(evt);
            }
        });

        cboxTopic.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnAddTopic.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAddTopic.setText("Add Topic");
        btnAddTopic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTopicActionPerformed(evt);
            }
        });

        btnRemoveTopic.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnRemoveTopic.setText("Remove Topic");
        btnRemoveTopic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveTopicActionPerformed(evt);
            }
        });

        lblCategory.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblCategory.setForeground(new java.awt.Color(102, 102, 102));
        lblCategory.setText("Category:");

        javax.swing.GroupLayout pnlFlashcardTopFrameLayout = new javax.swing.GroupLayout(pnlFlashcardTopFrame);
        pnlFlashcardTopFrame.setLayout(pnlFlashcardTopFrameLayout);
        pnlFlashcardTopFrameLayout.setHorizontalGroup(
            pnlFlashcardTopFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlashcardTopFrameLayout.createSequentialGroup()
                .addGroup(pnlFlashcardTopFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFlashcardTopFrameLayout.createSequentialGroup()
                        .addGap(99, 99, 99)
                        .addComponent(cboxTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(185, 185, 185)
                        .addComponent(lblCategory)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlFlashcardTopFrameLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(btnAddTopic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRemoveTopic)))
                .addContainerGap(239, Short.MAX_VALUE))
        );
        pnlFlashcardTopFrameLayout.setVerticalGroup(
            pnlFlashcardTopFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlashcardTopFrameLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(pnlFlashcardTopFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxTopic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCategory))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pnlFlashcardTopFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddTopic)
                    .addComponent(btnRemoveTopic))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(pnlFlashcardTopFrame, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 750, -1));

        pnlInputBackground.setBackground(new java.awt.Color(204, 204, 255));
        pnlInputBackground.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

        lblAnswer.setFont(new java.awt.Font("Segoe UI Black", 1, 14)); // NOI18N
        lblAnswer.setForeground(new java.awt.Color(102, 102, 102));
        lblAnswer.setText("Back (Answer)");

        lblFlashcardConfirmation.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblFlashcardConfirmation.setForeground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout pnlInputBackgroundLayout = new javax.swing.GroupLayout(pnlInputBackground);
        pnlInputBackground.setLayout(pnlInputBackgroundLayout);
        pnlInputBackgroundLayout.setHorizontalGroup(
            pnlInputBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlInputBackgroundLayout.createSequentialGroup()
                .addGroup(pnlInputBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlInputBackgroundLayout.createSequentialGroup()
                        .addGap(247, 247, 247)
                        .addComponent(lblFlashcardConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlInputBackgroundLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(lblAnswer, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(112, Short.MAX_VALUE))
        );
        pnlInputBackgroundLayout.setVerticalGroup(
            pnlInputBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlInputBackgroundLayout.createSequentialGroup()
                .addContainerGap(203, Short.MAX_VALUE)
                .addComponent(lblAnswer)
                .addGap(101, 101, 101)
                .addComponent(lblFlashcardConfirmation, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        getContentPane().add(pnlInputBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 750, 370));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        String category = (String) cboxCategory.getSelectedItem();
    String topic = (String) cboxTopic.getSelectedItem();
    String question = txtQuestionInput.getText();
    String answer = txtAnswerInput.getText();

    ArrayList<String> errors = new ArrayList<>();

    if (category == null || category.trim().isEmpty()) {
        errors.add("Category is missing.");
    }

    if (topic == null || topic.trim().isEmpty()) {
        errors.add("Topic is missing.");
    }

    if (question == null || question.trim().isEmpty()) {
        errors.add("Question is missing.");
    }

    if (answer == null || answer.trim().isEmpty()) {
        errors.add("Answer is missing.");
    }

    if (!errors.isEmpty()) {
        // Print error messages for missing inputs or inputs with invalid characters
        StringBuilder errorMessage = new StringBuilder("Errors:\n");
        for (String error : errors) {
            errorMessage.append(error).append("\n");
        }
        JOptionPane.showMessageDialog(this, errorMessage.toString(), "Input Error", JOptionPane.ERROR_MESSAGE);
    } else {
        Flashcard flashcard = new Flashcard(category, topic, question, answer);
        saveFlashcardToJson(flashcard);

        // Print confirmation message to the console
        lblFlashcardConfirmation.setText("Flashcard was added successfully.");

        // Clear the question and answer fields
        txtQuestionInput.setText("");
        txtAnswerInput.setText("");

        // Optionally, you can show a confirmation message to the user
       
    }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnAddCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddCategoryActionPerformed
        // TODO add your handling code here:
        String category = JOptionPane.showInputDialog(this, "Enter a category:");

        // Check if the user entered a category and it's not empty
        if (category != null && !category.trim().isEmpty()) {
            // Check for invalid characters in the category name
            if (!isValidName(category)) {
                JOptionPane.showMessageDialog(this, "Invalid category name. Category names cannot contain characters like \\/:*?\"<>|.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            } else {
                // Add the category to the jComboBox1
                DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cboxCategory.getModel();
                model.addElement(category);
            }
        }
    }//GEN-LAST:event_btnAddCategoryActionPerformed

    private void cboxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboxCategoryActionPerformed
        // TODO add your handling code here:
        String selectedCategory = (String) cboxCategory.getSelectedItem();
        updateTopicComboBox(selectedCategory);

    }//GEN-LAST:event_cboxCategoryActionPerformed

    private void btnRemoveCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveCategoryActionPerformed
        JFrame categoryFrame = new JFrame("Categories");

        // Create a JList to display the categories
        DefaultListModel<String> listModel = new DefaultListModel<>();
        for (int i = 0; i < cboxCategory.getItemCount(); i++) {
            listModel.addElement(cboxCategory.getItemAt(i).toString());
        }
        JList<String> categoryList = new JList<>(listModel);
        JScrollPane scrollPane = new JScrollPane(categoryList);

        // Create a button to remove the selected category
        JButton removeButton = new JButton("Remove");
        removeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedCategory = categoryList.getSelectedValue();
                if (selectedCategory != null) {
                    // Delete the corresponding folder
                    deleteCategoryFolder(selectedCategory);

                    // Remove the selected item from jComboBox1
                    cboxCategory.removeItem(selectedCategory);

                    categoryFrame.dispose(); // Close the category frame
                }
            }
        });

        // Create a panel to hold the components using GridBagLayout
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(10, 10, 10, 10); // Add some padding
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;

        // Add the scroll pane to the panel
        panel.add(scrollPane, gbc);

        // Increment the y-coordinate for the remove button
        gbc.gridy++;
        gbc.weighty = 0.0;

        // Add the remove button to the panel
        panel.add(removeButton, gbc);

        // Add the panel to the frame
        categoryFrame.add(panel);

        // Set the default close operation to dispose on close
        categoryFrame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

        // Pack and set the frame to be visible
        categoryFrame.pack();
        categoryFrame.setVisible(true);

    }//GEN-LAST:event_btnRemoveCategoryActionPerformed

    private void btnAddTopicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTopicActionPerformed
        // TODO add your handling code here:
        String selectedCategory = (String) cboxCategory.getSelectedItem();
        String topic = JOptionPane.showInputDialog(this, "Enter a topic:");

        if (topic != null && !topic.trim().isEmpty()) {
            if (!isValidName(topic)) {
                JOptionPane.showMessageDialog(this, "Invalid topic name. Topic names cannot contain characters like \\/:*?\"<>|.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            } else {
                String topicDirectoryPath = "Flashcards/" + selectedCategory + "/" + topic;
                File topicDirectory = new File(topicDirectoryPath);
                if (!topicDirectory.exists()) {
                    topicDirectory.mkdirs();
                    updateTopicComboBox(selectedCategory);
                } else {
                    JOptionPane.showMessageDialog(this, "Topic already exists.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_btnAddTopicActionPerformed

    private void btnRemoveTopicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveTopicActionPerformed
        // TODO add your handling code here:
        String selectedCategory = (String) cboxCategory.getSelectedItem();
        String selectedTopic = (String) cboxTopic.getSelectedItem();

        if (selectedTopic != null) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the topic \"" + selectedTopic + "\"?", "Warning", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                String topicDirectoryPath = "Flashcards/" + selectedCategory + "/" + selectedTopic;
                Path topicDirectory = Paths.get(topicDirectoryPath);
                deleteDirectory(topicDirectory);
                updateTopicComboBox(selectedCategory);
            }
        }
    }

    private void deleteDirectory(Path directory) {

        try {
            if (Files.exists(directory)) {
                Files.walk(directory)
                        .sorted(Comparator.reverseOrder())
                        .map(Path::toFile)
                        .forEach(File::delete);

                System.out.println("Topic folder deleted successfully.");
            } else {
                System.out.println("Directory does not exist, nothing to delete.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("An error occurred while deleting the topic folder.");
        }

    }//GEN-LAST:event_btnRemoveTopicActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashcardInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashcardInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashcardInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashcardInput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlashcardInput().setVisible(true);
            }
        });
    }

    private void saveFlashcardToJson(Flashcard flashcard) {
        try {
            // Create a directory for the category and topic if they don't exist
            String rootDirectory = "Flashcards";
            String categoryDirectory = rootDirectory + "/" + flashcard.getFlashCardCategory();
            String topicDirectory = categoryDirectory + "/" + flashcard.getTopic();

            new File(rootDirectory).mkdirs();
            new File(categoryDirectory).mkdirs();
            new File(topicDirectory).mkdirs();

            // JSON file path
            String filePath = topicDirectory + "/flashcards.json";
            File file = new File(filePath);

            ObjectMapper objectMapper = new ObjectMapper();
            ArrayNode flashcardsArray;

            if (file.exists() && file.length() != 0) {
                // Read existing data and convert to ArrayNode
                flashcardsArray = (ArrayNode) objectMapper.readTree(file);
            } else {
                // Create new ArrayNode
                flashcardsArray = objectMapper.createArrayNode();
            }

            // Create new flashcard node
            ObjectNode flashcardNode = objectMapper.createObjectNode();
            flashcardNode.put("flashCardCategory", flashcard.getFlashCardCategory());
            flashcardNode.put("question", flashcard.getQuestion());
            flashcardNode.put("answer", flashcard.getAnswer());
            flashcardNode.put("topic", flashcard.getTopic());
            flashcardNode.put("status", flashcard.getStatus());

            // Add new flashcard to array
            flashcardsArray.add(flashcardNode);

            // Write array back to file
            objectMapper.writerWithDefaultPrettyPrinter().writeValue(file, flashcardsArray);

            lblMessage.setText("Flashcard saved to: " + filePath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void deleteCategoryFolder(String category) {
        Path directory = Paths.get("Flashcards", category);
        try {
            // Delete all contents of the directory recursively and then the directory itself
            if (Files.exists(directory)) { // Only proceed if the directory exists
                Files.walk(directory)
                        .sorted(Comparator.reverseOrder())
                        .map(Path::toFile)
                        .forEach(File::delete);

                System.out.println("Category folder deleted successfully.");
            } else {
                System.out.println("Directory does not exist, nothing to delete.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("An error occurred while deleting the category folder.");
        }
    }

    private void updateCategoryComboBox() {
        String directoryPath = "Flashcards";
        File directory = new File(directoryPath);

        if (directory.exists() && directory.isDirectory()) {
            File[] categoryFolders = directory.listFiles(File::isDirectory);
            DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cboxCategory.getModel();
            model.removeAllElements();

            for (File categoryFolder : categoryFolders) {
                model.addElement(categoryFolder.getName());
            }
        }
    }

    private boolean isValidName(String name) {
        String invalidChars = "\\/:*?\"<>|";
        for (char c : invalidChars.toCharArray()) {
            if (name.indexOf(c) >= 0) {
                return false;
            }
        }
        return true;
    }

    private void updateTopicComboBox(String selectedCategory) {
        String directoryPath = "Flashcards/" + selectedCategory;
        File directory = new File(directoryPath);

        if (directory.exists() && directory.isDirectory()) {
            File[] topicFolders = directory.listFiles(File::isDirectory);
            DefaultComboBoxModel<String> model = (DefaultComboBoxModel<String>) cboxTopic.getModel();
            model.removeAllElements();

            for (File topicFolder : topicFolders) {
                model.addElement(topicFolder.getName());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAddCategory;
    private javax.swing.JButton btnAddTopic;
    private javax.swing.JButton btnRemoveCategory;
    private javax.swing.JButton btnRemoveTopic;
    private javax.swing.JComboBox<String> cboxCategory;
    private javax.swing.JComboBox<String> cboxTopic;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblAnswer;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblFlashcardConfirmation;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblQuestion;
    private javax.swing.JLabel lblTopic;
    private javax.swing.JPanel pnlFlashcardTopFrame;
    private javax.swing.JPanel pnlInputBackground;
    private javax.swing.JTextArea txtAnswerInput;
    private javax.swing.JTextArea txtQuestionInput;
    // End of variables declaration//GEN-END:variables
}
