/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.flashy;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author arpan
 */
public class FlashcardEditing extends javax.swing.JFrame {

    private List<FlashcardCategory> categories;
    private DefaultTableModel tableModel;

    /**
     * Creates new form FlashcardEditing
     */
    public FlashcardEditing() {
        
        FlashcardReading flashcardReading = new FlashcardReading();
        flashcardReading.loadCategories();
        categories = flashcardReading.returnCategories();

        initComponents();

        populateCategoryComboBox();

        // Add an ItemListener to the category combo box
        cboxCategorySelection.addItemListener(new ItemListener() {
            public void itemStateChanged(ItemEvent event) {
                if (event.getStateChange() == ItemEvent.SELECTED) {
                    int selectedIndex = cboxCategorySelection.getSelectedIndex();
                    if (selectedIndex >= 0) {
                        FlashcardCategory selectedCategory = categories.get(selectedIndex);
                        populateTopicComboBox(selectedCategory);
                    }
                }
            }
        });

        // Initial population of topics if categories exist
        if (!categories.isEmpty()) {
            populateTopicComboBox(categories.get(0));
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlashcardQuestions = new javax.swing.JTable();
        pnlFlashcardEditTop = new javax.swing.JPanel();
        cboxTopicSelection = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();
        cboxCategorySelection = new javax.swing.JComboBox<>();
        lblTopic = new javax.swing.JLabel();
        lblCategory = new javax.swing.JLabel();
        pnlFlashcardEditBottom = new javax.swing.JPanel();
        pnlFlashcardEditMiddle = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblFlashcardQuestions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Title 1", "Title 2"
            }
        ));
        jScrollPane1.setViewportView(tblFlashcardQuestions);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 100, 500, 360));

        pnlFlashcardEditTop.setBackground(new java.awt.Color(204, 204, 204));
        pnlFlashcardEditTop.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        cboxTopicSelection.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        cboxTopicSelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnSearch.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        cboxCategorySelection.setFont(new java.awt.Font("Trebuchet MS", 1, 12)); // NOI18N
        cboxCategorySelection.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblTopic.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblTopic.setForeground(new java.awt.Color(102, 102, 102));
        lblTopic.setText("Topic:");

        lblCategory.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblCategory.setForeground(new java.awt.Color(102, 102, 102));
        lblCategory.setText("Category:");

        javax.swing.GroupLayout pnlFlashcardEditTopLayout = new javax.swing.GroupLayout(pnlFlashcardEditTop);
        pnlFlashcardEditTop.setLayout(pnlFlashcardEditTopLayout);
        pnlFlashcardEditTopLayout.setHorizontalGroup(
            pnlFlashcardEditTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlFlashcardEditTopLayout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(pnlFlashcardEditTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxCategorySelection, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(pnlFlashcardEditTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFlashcardEditTopLayout.createSequentialGroup()
                        .addGap(92, 92, 92)
                        .addComponent(cboxTopicSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 106, Short.MAX_VALUE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67))
                    .addGroup(pnlFlashcardEditTopLayout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(lblTopic, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlFlashcardEditTopLayout.setVerticalGroup(
            pnlFlashcardEditTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFlashcardEditTopLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlFlashcardEditTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCategory)
                    .addComponent(lblTopic))
                .addGap(4, 4, 4)
                .addGroup(pnlFlashcardEditTopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboxTopicSelection, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cboxCategorySelection, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        getContentPane().add(pnlFlashcardEditTop, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 80));

        pnlFlashcardEditBottom.setBackground(new java.awt.Color(255, 153, 153));
        pnlFlashcardEditBottom.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)));

        javax.swing.GroupLayout pnlFlashcardEditBottomLayout = new javax.swing.GroupLayout(pnlFlashcardEditBottom);
        pnlFlashcardEditBottom.setLayout(pnlFlashcardEditBottomLayout);
        pnlFlashcardEditBottomLayout.setHorizontalGroup(
            pnlFlashcardEditBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        pnlFlashcardEditBottomLayout.setVerticalGroup(
            pnlFlashcardEditBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 258, Short.MAX_VALUE)
        );

        getContentPane().add(pnlFlashcardEditBottom, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, 630, 260));

        pnlFlashcardEditMiddle.setBackground(new java.awt.Color(204, 204, 255));
        pnlFlashcardEditMiddle.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 153, 0)));

        javax.swing.GroupLayout pnlFlashcardEditMiddleLayout = new javax.swing.GroupLayout(pnlFlashcardEditMiddle);
        pnlFlashcardEditMiddle.setLayout(pnlFlashcardEditMiddleLayout);
        pnlFlashcardEditMiddleLayout.setHorizontalGroup(
            pnlFlashcardEditMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 628, Short.MAX_VALUE)
        );
        pnlFlashcardEditMiddleLayout.setVerticalGroup(
            pnlFlashcardEditMiddleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 188, Short.MAX_VALUE)
        );

        getContentPane().add(pnlFlashcardEditMiddle, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 630, 190));

        jPanel6.setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 630, 40));

        jPanel7.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 630, 40));

        jPanel8.setBackground(new java.awt.Color(255, 204, 204));

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 630, 40));

        jPanel9.setBackground(new java.awt.Color(204, 204, 255));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 630, 40));

        jPanel10.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, -1, -1));

        jPanel11.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 330, 630, 40));

        jPanel12.setBackground(new java.awt.Color(255, 102, 102));

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 430, 630, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String selectedCategoryName = cboxCategorySelection.getSelectedItem().toString();
        String selectedTopicName = cboxTopicSelection.getSelectedItem().toString();

        FlashcardTopic selectedTopic = findTopicByCategoryAndName(selectedCategoryName, selectedTopicName);
        if (selectedTopic != null) {
            ArrayList<Flashcard> flashcards = selectedTopic.getFlashcardList();
            if (flashcards.isEmpty()) {
                // No flashcards available for the selected topic
                JOptionPane.showMessageDialog(this, "No flashcards available for the selected topic.");
            } else {
                // Create a two-dimensional array to store flashcard data, including an extra column for the edit buttons
                String[][] data = new String[flashcards.size()][3];

                for (int i = 0; i < flashcards.size(); i++) {
                    Flashcard flashcard = flashcards.get(i);
                    data[i][0] = flashcard.getQuestion();
                    data[i][1] = flashcard.getAnswer();
                    data[i][2] = "Edit";  // Placeholder for the button
                }

                // Create a table model and set it to the JTable
                DefaultTableModel tableModel = new DefaultTableModel(data, new String[]{"Question", "Answer", "Edit"}) {
                    @Override
                    public boolean isCellEditable(int row, int column) {
                        return column == 2;  // Only the third column (Edit buttons) is editable
                    }
                };
                tblFlashcardQuestions.setModel(tableModel);
                tblFlashcardQuestions.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer());
                tblFlashcardQuestions.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(new JCheckBox(), tblFlashcardQuestions));
            }
        } else {
            JOptionPane.showMessageDialog(this, "No topic found or no flashcards available for the selected topic.");
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashcardEditing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashcardEditing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashcardEditing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashcardEditing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FlashcardEditing().setVisible(true);
            }
        });
    }

    private void populateCategoryComboBox() {
        DefaultComboBoxModel<String> categoryModel = new DefaultComboBoxModel<>();
        for (FlashcardCategory category : categories) {
            categoryModel.addElement(category.getFlashcardCategory());
        }
        cboxCategorySelection.setModel(categoryModel);
    }

    private void populateTopicComboBox(FlashcardCategory category) {
        DefaultComboBoxModel<String> topicModel = new DefaultComboBoxModel<>();
        ArrayList<FlashcardTopic> topicList = category.getFlashcardTopicList();
        for (FlashcardTopic topic : topicList) {
            topicModel.addElement(topic.getTopicName());
        }
        cboxTopicSelection.setModel(topicModel);
    }

    private FlashcardTopic findTopicByCategoryAndName(String categoryName, String topicName) {
        for (FlashcardCategory category : categories) {
            if (category.getFlashcardCategory().equals(categoryName)) {
                for (FlashcardTopic topic : category.getFlashcardTopicList()) {
                    if (topic.getTopicName().equals(topicName)) {
                        return topic;
                    }
                }
            }
        }
        return null;
    }

    private void printFlashcards(FlashcardTopic topic) {
        ArrayList<Flashcard> flashcards = topic.getFlashcardList();
        if (flashcards.isEmpty()) {
            System.out.println("No flashcards available for the topic: " + topic.getTopicName());
            return;
        }

        for (Flashcard flashcard : flashcards) {
            System.out.println("Question: " + flashcard.getQuestion());
            System.out.println("Answer: " + flashcard.getAnswer());
            System.out.println("---");
        }
    }

    private void updateFlashcardTable(FlashcardCategory category, FlashcardTopic topic) {
    ArrayList<Flashcard> flashcards = topic.getFlashcardList();
    String[][] data = new String[flashcards.size()][3];
    for (int i = 0; i < flashcards.size(); i++) {
        Flashcard flashcard = flashcards.get(i);
        data[i][0] = flashcard.getQuestion();
        data[i][1] = flashcard.getAnswer();
        data[i][2] = "Edit";
    }

    DefaultTableModel tableModel = (DefaultTableModel) tblFlashcardQuestions.getModel();
    tableModel.setDataVector(data, new String[]{"Question", "Answer", "Edit"});
    tblFlashcardQuestions.getColumnModel().getColumn(2).setCellRenderer(new ButtonRenderer());
    tblFlashcardQuestions.getColumnModel().getColumn(2).setCellEditor(new ButtonEditor(new JCheckBox(), tblFlashcardQuestions));
    tableModel.fireTableDataChanged(); // Notify the model that data has changed
}

    class ButtonRenderer extends JButton implements TableCellRenderer {

        public ButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

   private void showEditDialog(int row) {
    if (row == -1) {
        JOptionPane.showMessageDialog(this, "No row selected.");
        return;
    }

    FlashcardCategory selectedCategory = categories.get(cboxCategorySelection.getSelectedIndex());
    FlashcardTopic selectedTopic = selectedCategory.getFlashcardTopicList().get(cboxTopicSelection.getSelectedIndex());
    Flashcard flashcard = selectedTopic.getFlashcardList().get(row);

    FlashcardEditDialog dialog = new FlashcardEditDialog(this, flashcard.getQuestion(), flashcard.getAnswer());
    dialog.setVisible(true);

    if (dialog.isDeleted()) {
        String categoryName = selectedCategory.getFlashcardCategory();
        String topicName = selectedTopic.getTopicName();
        String question = flashcard.getQuestion();

        FlashcardReading flashcardReading = new FlashcardReading();
        flashcardReading.loadCategories(); // Load categories if not already loaded
        boolean isDeleted = flashcardReading.deleteFlashcard(categoryName, topicName, question);

        if (isDeleted) {
            selectedTopic.getFlashcardList().remove(row); // Remove the flashcard from the list
            updateFlashcardTable(selectedCategory, selectedTopic); // Update the table to show the flashcards after deletion
        } else {
            JOptionPane.showMessageDialog(this, "Error deleting the flashcard.");
        }
    } else if (dialog.isSaved()) {
        String newQuestion = dialog.getQuestion();
        String newAnswer = dialog.getAnswer();

        if (newQuestion != null && newAnswer != null && (!newQuestion.isEmpty() || !newAnswer.isEmpty())) {
            flashcard.setQuestion(newQuestion);
            flashcard.setAnswer(newAnswer);

            FlashcardReading flashcardReading = new FlashcardReading();
            flashcardReading.saveCategory(selectedCategory);

            // Update the table to show the updated values
            updateFlashcardTable(selectedCategory, selectedTopic);
        }
    }
}


    class ButtonEditor extends DefaultCellEditor {
    protected JButton button;
    private String label;
    private boolean isPushed;
    private JTable table; // Add this line

    public ButtonEditor(JCheckBox checkBox, JTable table) { // Update the constructor to accept JTable
        super(checkBox);
        this.table = table;
        button = new JButton();
        button.setOpaque(true);
        button.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                int selectedRow = table.getSelectedRow();
                if (selectedRow != -1) { // Check if a row is selected
                    fireEditingStopped();
                    // Call the edit dialog here, passing the selectedRow
                    showEditDialog(selectedRow); 
                } else {
                    // Maybe add some error handling here, like a message dialog
                    JOptionPane.showMessageDialog(button, "Please select a row to edit.");
                }
            }
        });
    }

    public Component getTableCellEditorComponent(JTable table, Object value,
            boolean isSelected, int row, int column) {
        if (isSelected) {
            button.setForeground(table.getSelectionForeground());
            button.setBackground(table.getSelectionBackground());
        } else {
            button.setForeground(table.getForeground());
            button.setBackground(table.getBackground());
        }
        label = (value == null) ? "" : value.toString();
        button.setText(label);
        isPushed = true;
        return button;
    }

    public Object getCellEditorValue() {
        isPushed = false;
        return label;
    }

    public boolean stopCellEditing() {
        isPushed = false;
        return super.stopCellEditing();
    }

    protected void fireEditingStopped() {
        super.fireEditingStopped();
    }
}


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cboxCategorySelection;
    private javax.swing.JComboBox<String> cboxTopicSelection;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCategory;
    private javax.swing.JLabel lblTopic;
    private javax.swing.JPanel pnlFlashcardEditBottom;
    private javax.swing.JPanel pnlFlashcardEditMiddle;
    private javax.swing.JPanel pnlFlashcardEditTop;
    private javax.swing.JTable tblFlashcardQuestions;
    // End of variables declaration//GEN-END:variables
}
