/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.flashy;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList; 
import java.util.List;
import javax.swing.DefaultCellEditor;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
/**
 *
 * @author soham
 */
public class FlashCardDisplayGUI extends javax.swing.JFrame {
    private List<FlashcardCategory> categories;
    private DefaultTableModel tableModel;
    
  
    /**
     * Creates new form FlashCardDisplayGUI
     */
   public FlashCardDisplayGUI() {
       FlashcardReading flashcardReading = new FlashcardReading();
        flashcardReading.loadCategories();  // This will populate categories
        categories = flashcardReading.returnCategories();
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sbar1 = new javax.swing.JScrollPane();
        tblFlashcardDisplay = new javax.swing.JTable();
        pnlBackground = new javax.swing.JPanel();
        pnlFlashcardOverview = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblFlashcardDisplay.setFont(new java.awt.Font("Yu Gothic UI Semilight", 1, 12)); // NOI18N
        tblFlashcardDisplay.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Categories", "Count"
            }
        ));
        tblFlashcardDisplay.setGridColor(new java.awt.Color(204, 204, 255));
        sbar1.setViewportView(tblFlashcardDisplay);

        getContentPane().add(sbar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 25, 570, 430));

        pnlBackground.setBackground(new java.awt.Color(204, 204, 255));
        pnlBackground.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 153), 2));

        javax.swing.GroupLayout pnlFlashcardOverviewLayout = new javax.swing.GroupLayout(pnlFlashcardOverview);
        pnlFlashcardOverview.setLayout(pnlFlashcardOverviewLayout);
        pnlFlashcardOverviewLayout.setHorizontalGroup(
            pnlFlashcardOverviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 566, Short.MAX_VALUE)
        );
        pnlFlashcardOverviewLayout.setVerticalGroup(
            pnlFlashcardOverviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout pnlBackgroundLayout = new javax.swing.GroupLayout(pnlBackground);
        pnlBackground.setLayout(pnlBackgroundLayout);
        pnlBackgroundLayout.setHorizontalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 626, Short.MAX_VALUE)
            .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                    .addContainerGap(29, Short.MAX_VALUE)
                    .addComponent(pnlFlashcardOverview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(31, Short.MAX_VALUE)))
        );
        pnlBackgroundLayout.setVerticalGroup(
            pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
            .addGroup(pnlBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBackgroundLayout.createSequentialGroup()
                    .addContainerGap(26, Short.MAX_VALUE)
                    .addComponent(pnlFlashcardOverview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(35, Short.MAX_VALUE)))
        );

        getContentPane().add(pnlBackground, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 630, 490));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FlashCardDisplayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FlashCardDisplayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FlashCardDisplayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FlashCardDisplayGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
    public void run() {
        new FlashCardDisplayGUI().setVisible(true);
    }
});
    } private void populateTable() {
        tableModel = new DefaultTableModel();
        tableModel.addColumn("Category / Topic");
        tableModel.addColumn("Card Counts");
        tableModel.addColumn("");  // Column for review buttons

        for (FlashcardCategory category : categories) {
            tableModel.addRow(new Object[]{category.getFlashcardCategory(), ""});  // Empty string for card count and button in category row

            for (FlashcardTopic topic : category.getFlashcardTopicList()) {
                String indentedTopic = "    " + topic.getTopicName();  // Indent topics for visual hierarchy
                int cardCount = topic.getFlashcardList().size();
                tableModel.addRow(new Object[]{indentedTopic, cardCount, "Review"});
            }
        }

        tblFlashcardDisplay.setModel(tableModel);
        tblFlashcardDisplay.getColumn("Category / Topic").setCellRenderer(new IndentedCellRenderer());
        tblFlashcardDisplay.getColumn("").setCellRenderer(new ButtonRenderer());
        tblFlashcardDisplay.getColumn("").setCellEditor(new ButtonEditor(new JCheckBox()));
    }

    class ButtonRenderer extends JButton implements TableCellRenderer {
        public ButtonRenderer() {
            setOpaque(true);
        }

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            setText((value == null) ? "" : value.toString());
            return this;
        }
    }

    class ButtonEditor extends DefaultCellEditor {
        protected JButton button;
        private String label;
        private boolean isPushed;

        public ButtonEditor(JCheckBox checkBox) {
            super(checkBox);
            button = new JButton();
            button.setOpaque(true);
            button.addActionListener(e -> {
    System.out.println("Button clicked");
    fireEditingStopped();
});
        }

        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {
            if (isSelected) {
                button.setForeground(table.getSelectionForeground());
                button.setBackground(table.getSelectionBackground());
            } else {
                button.setForeground(table.getForeground());
                button.setBackground(table.getBackground());
            }
            label = (value == null) ? "" : value.toString();
            button.setText(label);
            isPushed = true;
            return button;
        }

        public Object getCellEditorValue() {
    if (isPushed) {
        int row = tblFlashcardDisplay.getSelectedRow();
        int accumulatedRows = 0;
        FlashcardCategory selectedCategory = null;
        FlashcardTopic selectedTopic = null;

        // Iterate through categories and topics
        for (FlashcardCategory category : categories) {
            if (row == accumulatedRows) {
                // It's a category row, not a topic row
                selectedCategory = category;
                break;
            }

            // Accumulate category row
            accumulatedRows++;
            
            // Check each topic in the current category
            for (FlashcardTopic topic : category.getFlashcardTopicList()) {
                if (row == accumulatedRows) {
                    // Found the topic row
                    selectedCategory = category;
                    selectedTopic = topic;
                    break;
                }

                // Accumulate topic row
                accumulatedRows++;
            }

            if (selectedTopic != null) {
                // Break the outer loop if the topic is found
                break;
            }
        }

        if (selectedCategory != null && selectedTopic != null) {
            // Logic for when a topic row is clicked
            System.out.println("Category: " + selectedCategory.getFlashcardCategory());
            System.out.println("Topic: " + selectedTopic.getTopicName());
            FlashcardReviewInterface reviewInterface = new FlashcardReviewInterface(selectedTopic);
            reviewInterface.setVisible(true);

            // Correctly reference the enclosing JFrame to dispose it
            FlashCardDisplayGUI.this.dispose();
        } else if (selectedCategory != null) {
            // Logic for when a category row is clicked, if needed
            System.out.println("Category row clicked: " + selectedCategory.getFlashcardCategory());
        }
    }
    isPushed = false;
    return label;
}
    }

    private FlashcardCategory findCategoryForRow(int row) {
    FlashcardCategory currentCategory = null;
    
    for (int i = 0; i <= row; i++) {
        String cellValue = (String) tblFlashcardDisplay.getValueAt(i, 0); // Assuming first column contains the Category / Topic names
        
        // Check if the row is a category (not indented)
        if (!cellValue.startsWith("    ")) {
            // Find the category in the list of categories
            for (FlashcardCategory category : categories) {
                if (category.getFlashcardCategory().equals(cellValue.trim())) {
                    currentCategory = category;
                    break;
                }
            }
        }
        // If it's a topic (indented), currentCategory is already set to the right category
    }
    
    return currentCategory;
}

    class IndentedCellRenderer extends DefaultTableCellRenderer {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            if (value instanceof String && ((String) value).startsWith("    ")) {  // Detect indented text
                c.setFont(c.getFont().deriveFont(Font.PLAIN));  // Make topic font plain
            } else {
                c.setFont(c.getFont().deriveFont(Font.BOLD));  // Make category font bold
            }
            return c;
        }
    
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlBackground;
    private javax.swing.JPanel pnlFlashcardOverview;
    private javax.swing.JScrollPane sbar1;
    private javax.swing.JTable tblFlashcardDisplay;
    // End of variables declaration//GEN-END:variables
}
